import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import axios from 'axios';
import { APIMAIN } from '../../API/tdquestAPI';

export interface todoListState {
  status: 'idle' | 'loading' | 'failed';
  rankingList: any;
  top: any;
}

const initialState: todoListState = {
  status: 'idle',
  rankingList: {},
  top: {},
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getRankingListAsync = createAsyncThunk(
  'get/rankingList',
  async () => {
    try {
      const data = axios.get(`${APIMAIN}/rank/status`).then((res) => {
        return res.data;
      });
      return data;
    } catch (error: any) {
      console.log(`error:${error.response}`);
    }
  }
);

export const getTopRankerAsync = createAsyncThunk('get/topRanker', async () => {
  try {
    const data = axios.get(`${APIMAIN}/rank`).then((res) => {
      return res.data;
    });
    return data;
  } catch (error: any) {
    console.log(`error:${error.response}`);
  }
});

export const rankingSlice = createSlice({
  name: 'ranking',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getRankingListAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getRankingListAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.rankingList = action.payload;
      })
      .addCase(getTopRankerAsync.fulfilled, (state, action) => {
        state.top = action.payload.ranker[0];
      });
  },
});

// export const {  } = characterSlice.actions;

export default rankingSlice.reducer;
